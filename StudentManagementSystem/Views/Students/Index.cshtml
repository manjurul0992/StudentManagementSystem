@model IEnumerable<StudentManagementSystem.Models.Student>
@using PagedList;
@using PagedList.Mvc
@{
    ViewBag.Title = "Index";
}




<div class="row">
    <div class="col-md-12">
        <h2 class="d-flex justify-content-center alert alert-info">Students List</h2>
        <div class="d-flex justify-content-end">
            <a href="@Url.Action("Create","Students")" class="btn btn-primary"><span class="fa fa-plus"></span></a>
        </div>
        <table class="table table-bordered table-striped" style="margin-top:5px;">
            <thead>
                <tr>
                    <th>@Html.DisplayNameFor(x => x.StudentName)</th>
                    <th>@Html.DisplayNameFor(x => x.BirthDate)</th>
                    <th>@Html.DisplayNameFor(x => x.Class)</th>
                    <th>@Html.DisplayNameFor(x => x.Section)</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>

                        <td>@Html.DisplayFor(x => item.StudentName)</td>
                        <td>@Html.DisplayFor(x => item.BirthDate)</td>
                        <td>@Html.DisplayFor(x => item.Class)</td>
                        <td>@Html.DisplayFor(x => item.Section)</td>

                        <td>
                            <a href="@Url.Action("Edit", new { id=item.StudentId})" class="btn btn-success"><span class="fa fa-edit"></span></a>
                            <a href="@Url.Action("Delete", new { id=item.StudentId})" class="btn btn-danger"><span class="fa fa-trash"></span></a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="d-flex justify-content-end">
            @Html.PagedListPager(Model as IPagedList, page => Url.Action("Index", new { page = page }))
        </div>
    </div>
</div>
@section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
<script>
        // Reusable function to show Toastr notifications
        function showToastrNotification(type, message, options) {
            // Set default options if none are provided
            var defaultOptions = {
                "closeButton": true,
                "progressBar": true,
                "positionClass": "toast-top-right",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            };

            // Merge provided options with the default options
            var toastrOptions = $.extend({}, defaultOptions, options);

            toastr.options = toastrOptions;

            // Show the notification based on the type
            toastr[type](message);
        }

        $(document).ready(function () {
            @if (TempData["SuccessMessage"] != null)
            {
                <text>
                    showToastrNotification('success', '@TempData["SuccessMessage"]');
                </text>
            }
            @if (TempData["ShowData"] != null)
            {
                <text>
                    showToastrNotification('info', '@TempData["ShowData"]', {
                        "positionClass": "toast-bottom-left",
                        "timeOut": "10000",
                        "extendedTimeOut": "8000"
                    });
                </text>
            }
            @if (TempData["Edit"] != null)
            {
                <text>
            showToastrNotification('warning', '@TempData["Edit"]');
                </text>
            }
             @if (TempData["Delete"] != null)
            {
                 <text>
             showToastrNotification('warning', '@TempData["Delete"]');
                 </text>
            }
            @if (TempData["ErrorMessage"] != null)
            {
                <text>
                    showToastrNotification('error', '@TempData["ErrorMessage"]');
                </text>
            }
        });
</script>
}


